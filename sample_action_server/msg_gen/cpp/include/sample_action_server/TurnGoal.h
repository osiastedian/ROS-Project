/* Auto-generated by genmsg_cpp for file /home/ted/ROS/sandbox/sample_action_server/msg/TurnGoal.msg */
#ifndef SAMPLE_ACTION_SERVER_MESSAGE_TURNGOAL_H
#define SAMPLE_ACTION_SERVER_MESSAGE_TURNGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sample_action_server
{
template <class ContainerAllocator>
struct TurnGoal_ {
  typedef TurnGoal_<ContainerAllocator> Type;

  TurnGoal_()
  : turnId(0)
  {
  }

  TurnGoal_(const ContainerAllocator& _alloc)
  : turnId(0)
  {
  }

  typedef int64_t _turnId_type;
  int64_t turnId;


  typedef boost::shared_ptr< ::sample_action_server::TurnGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sample_action_server::TurnGoal_<ContainerAllocator>  const> ConstPtr;
}; // struct TurnGoal
typedef  ::sample_action_server::TurnGoal_<std::allocator<void> > TurnGoal;

typedef boost::shared_ptr< ::sample_action_server::TurnGoal> TurnGoalPtr;
typedef boost::shared_ptr< ::sample_action_server::TurnGoal const> TurnGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sample_action_server::TurnGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sample_action_server::TurnGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sample_action_server

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sample_action_server::TurnGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sample_action_server::TurnGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sample_action_server::TurnGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5652ef72e93af27756b35a6763446be7";
  }

  static const char* value(const  ::sample_action_server::TurnGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5652ef72e93af277ULL;
  static const uint64_t static_value2 = 0x56b35a6763446be7ULL;
};

template<class ContainerAllocator>
struct DataType< ::sample_action_server::TurnGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sample_action_server/TurnGoal";
  }

  static const char* value(const  ::sample_action_server::TurnGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sample_action_server::TurnGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
int64 turnId\n\
\n\
";
  }

  static const char* value(const  ::sample_action_server::TurnGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sample_action_server::TurnGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sample_action_server::TurnGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.turnId);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct TurnGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sample_action_server::TurnGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sample_action_server::TurnGoal_<ContainerAllocator> & v) 
  {
    s << indent << "turnId: ";
    Printer<int64_t>::stream(s, indent + "  ", v.turnId);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SAMPLE_ACTION_SERVER_MESSAGE_TURNGOAL_H

