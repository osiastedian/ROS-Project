/* Auto-generated by genmsg_cpp for file /home/ted/ROS/sandbox/ford_msgs/msg/ClusterHit.msg */
#ifndef FORD_MSGS_MESSAGE_CLUSTERHIT_H
#define FORD_MSGS_MESSAGE_CLUSTERHIT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace ford_msgs
{
template <class ContainerAllocator>
struct ClusterHit_ {
  typedef ClusterHit_<ContainerAllocator> Type;

  ClusterHit_()
  : header()
  , ped_id(0)
  , likelihood(0.0)
  {
  }

  ClusterHit_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , ped_id(0)
  , likelihood(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _ped_id_type;
  uint32_t ped_id;

  typedef float _likelihood_type;
  float likelihood;


  typedef boost::shared_ptr< ::ford_msgs::ClusterHit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ford_msgs::ClusterHit_<ContainerAllocator>  const> ConstPtr;
}; // struct ClusterHit
typedef  ::ford_msgs::ClusterHit_<std::allocator<void> > ClusterHit;

typedef boost::shared_ptr< ::ford_msgs::ClusterHit> ClusterHitPtr;
typedef boost::shared_ptr< ::ford_msgs::ClusterHit const> ClusterHitConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ford_msgs::ClusterHit_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ford_msgs::ClusterHit_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ford_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ford_msgs::ClusterHit_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ford_msgs::ClusterHit_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ford_msgs::ClusterHit_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22a0a4f41b3e5b3041fdd6c1be6ae884";
  }

  static const char* value(const  ::ford_msgs::ClusterHit_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x22a0a4f41b3e5b30ULL;
  static const uint64_t static_value2 = 0x41fdd6c1be6ae884ULL;
};

template<class ContainerAllocator>
struct DataType< ::ford_msgs::ClusterHit_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ford_msgs/ClusterHit";
  }

  static const char* value(const  ::ford_msgs::ClusterHit_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ford_msgs::ClusterHit_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint32 ped_id\n\
float32 likelihood\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::ford_msgs::ClusterHit_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ford_msgs::ClusterHit_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ford_msgs::ClusterHit_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ford_msgs::ClusterHit_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.ped_id);
    stream.next(m.likelihood);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ClusterHit_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ford_msgs::ClusterHit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ford_msgs::ClusterHit_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ped_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ped_id);
    s << indent << "likelihood: ";
    Printer<float>::stream(s, indent + "  ", v.likelihood);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FORD_MSGS_MESSAGE_CLUSTERHIT_H

