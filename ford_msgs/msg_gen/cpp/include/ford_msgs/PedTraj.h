/* Auto-generated by genmsg_cpp for file /home/ted/ROS/sandbox/ford_msgs/msg/PedTraj.msg */
#ifndef FORD_MSGS_MESSAGE_PEDTRAJ_H
#define FORD_MSGS_MESSAGE_PEDTRAJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ford_msgs/Pose2DStamped.h"

namespace ford_msgs
{
template <class ContainerAllocator>
struct PedTraj_ {
  typedef PedTraj_<ContainerAllocator> Type;

  PedTraj_()
  : ped_id(0)
  , traj()
  , value(0.0)
  , type(0)
  {
  }

  PedTraj_(const ContainerAllocator& _alloc)
  : ped_id(0)
  , traj(_alloc)
  , value(0.0)
  , type(0)
  {
  }

  typedef uint32_t _ped_id_type;
  uint32_t ped_id;

  typedef std::vector< ::ford_msgs::Pose2DStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ford_msgs::Pose2DStamped_<ContainerAllocator> >::other >  _traj_type;
  std::vector< ::ford_msgs::Pose2DStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ford_msgs::Pose2DStamped_<ContainerAllocator> >::other >  traj;

  typedef float _value_type;
  float value;

  typedef uint8_t _type_type;
  uint8_t type;

  enum { OBSERVATION = 0 };
  enum { PREDICTION_LINEAR = 1 };
  enum { PREDICTION_GP = 2 };

  typedef boost::shared_ptr< ::ford_msgs::PedTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ford_msgs::PedTraj_<ContainerAllocator>  const> ConstPtr;
}; // struct PedTraj
typedef  ::ford_msgs::PedTraj_<std::allocator<void> > PedTraj;

typedef boost::shared_ptr< ::ford_msgs::PedTraj> PedTrajPtr;
typedef boost::shared_ptr< ::ford_msgs::PedTraj const> PedTrajConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ford_msgs::PedTraj_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ford_msgs::PedTraj_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ford_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ford_msgs::PedTraj_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ford_msgs::PedTraj_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ford_msgs::PedTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8925770871a7e9ee7020a76e368dc696";
  }

  static const char* value(const  ::ford_msgs::PedTraj_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8925770871a7e9eeULL;
  static const uint64_t static_value2 = 0x7020a76e368dc696ULL;
};

template<class ContainerAllocator>
struct DataType< ::ford_msgs::PedTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ford_msgs/PedTraj";
  }

  static const char* value(const  ::ford_msgs::PedTraj_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ford_msgs::PedTraj_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 ped_id\n\
ford_msgs/Pose2DStamped[] traj\n\
float32 value #Used for PREDICTION types\n\
uint8 type \n\
#ENUM for type\n\
uint8 OBSERVATION=0\n\
uint8 PREDICTION_LINEAR=1\n\
uint8 PREDICTION_GP=2\n\
================================================================================\n\
MSG: ford_msgs/Pose2DStamped\n\
std_msgs/Header header\n\
geometry_msgs/Pose2D pose\n\
geometry_msgs/Vector3 velocity\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::ford_msgs::PedTraj_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ford_msgs::PedTraj_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ped_id);
    stream.next(m.traj);
    stream.next(m.value);
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PedTraj_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ford_msgs::PedTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ford_msgs::PedTraj_<ContainerAllocator> & v) 
  {
    s << indent << "ped_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ped_id);
    s << indent << "traj[]" << std::endl;
    for (size_t i = 0; i < v.traj.size(); ++i)
    {
      s << indent << "  traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ford_msgs::Pose2DStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.traj[i]);
    }
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FORD_MSGS_MESSAGE_PEDTRAJ_H

