/* Auto-generated by genmsg_cpp for file /home/ted/ROS/sandbox/obstacle_avoid/msg/AgentList.msg */
#ifndef OBSTACLE_AVOID_MESSAGE_AGENTLIST_H
#define OBSTACLE_AVOID_MESSAGE_AGENTLIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "obstacle_avoid/Agent.h"

namespace obstacle_avoid
{
template <class ContainerAllocator>
struct AgentList_ {
  typedef AgentList_<ContainerAllocator> Type;

  AgentList_()
  : list()
  {
  }

  AgentList_(const ContainerAllocator& _alloc)
  : list(_alloc)
  {
  }

  typedef std::vector< ::obstacle_avoid::Agent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::obstacle_avoid::Agent_<ContainerAllocator> >::other >  _list_type;
  std::vector< ::obstacle_avoid::Agent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::obstacle_avoid::Agent_<ContainerAllocator> >::other >  list;


  typedef boost::shared_ptr< ::obstacle_avoid::AgentList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_avoid::AgentList_<ContainerAllocator>  const> ConstPtr;
}; // struct AgentList
typedef  ::obstacle_avoid::AgentList_<std::allocator<void> > AgentList;

typedef boost::shared_ptr< ::obstacle_avoid::AgentList> AgentListPtr;
typedef boost::shared_ptr< ::obstacle_avoid::AgentList const> AgentListConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::obstacle_avoid::AgentList_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::obstacle_avoid::AgentList_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace obstacle_avoid

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::obstacle_avoid::AgentList_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::obstacle_avoid::AgentList_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::obstacle_avoid::AgentList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89adb5d7c94f57147efa3c2f27c2b24c";
  }

  static const char* value(const  ::obstacle_avoid::AgentList_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x89adb5d7c94f5714ULL;
  static const uint64_t static_value2 = 0x7efa3c2f27c2b24cULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_avoid::AgentList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "obstacle_avoid/AgentList";
  }

  static const char* value(const  ::obstacle_avoid::AgentList_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::obstacle_avoid::AgentList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "obstacle_avoid/Agent[] list\n\
================================================================================\n\
MSG: obstacle_avoid/Agent\n\
uint32[] labels\n\
geometry_msgs/Point position\n\
geometry_msgs/Vector3 velocity\n\
uint32 radius\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::obstacle_avoid::AgentList_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::obstacle_avoid::AgentList_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.list);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct AgentList_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_avoid::AgentList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::obstacle_avoid::AgentList_<ContainerAllocator> & v) 
  {
    s << indent << "list[]" << std::endl;
    for (size_t i = 0; i < v.list.size(); ++i)
    {
      s << indent << "  list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::obstacle_avoid::Agent_<ContainerAllocator> >::stream(s, indent + "    ", v.list[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_AVOID_MESSAGE_AGENTLIST_H

