/* Auto-generated by genmsg_cpp for file /home/ted/ROS/sandbox/obstacle_avoid/msg/Agent.msg */
#ifndef OBSTACLE_AVOID_MESSAGE_AGENT_H
#define OBSTACLE_AVOID_MESSAGE_AGENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Vector3.h"

namespace obstacle_avoid
{
template <class ContainerAllocator>
struct Agent_ {
  typedef Agent_<ContainerAllocator> Type;

  Agent_()
  : labels()
  , position()
  , velocity()
  , radius(0)
  {
  }

  Agent_(const ContainerAllocator& _alloc)
  : labels(_alloc)
  , position(_alloc)
  , velocity(_alloc)
  , radius(0)
  {
  }

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _labels_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  labels;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  velocity;

  typedef uint32_t _radius_type;
  uint32_t radius;


  typedef boost::shared_ptr< ::obstacle_avoid::Agent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_avoid::Agent_<ContainerAllocator>  const> ConstPtr;
}; // struct Agent
typedef  ::obstacle_avoid::Agent_<std::allocator<void> > Agent;

typedef boost::shared_ptr< ::obstacle_avoid::Agent> AgentPtr;
typedef boost::shared_ptr< ::obstacle_avoid::Agent const> AgentConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::obstacle_avoid::Agent_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::obstacle_avoid::Agent_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace obstacle_avoid

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::obstacle_avoid::Agent_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::obstacle_avoid::Agent_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::obstacle_avoid::Agent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46dce0cf997547f6311d35e6d320f9a9";
  }

  static const char* value(const  ::obstacle_avoid::Agent_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x46dce0cf997547f6ULL;
  static const uint64_t static_value2 = 0x311d35e6d320f9a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_avoid::Agent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "obstacle_avoid/Agent";
  }

  static const char* value(const  ::obstacle_avoid::Agent_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::obstacle_avoid::Agent_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32[] labels\n\
geometry_msgs/Point position\n\
geometry_msgs/Vector3 velocity\n\
uint32 radius\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::obstacle_avoid::Agent_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::obstacle_avoid::Agent_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.labels);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.radius);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct Agent_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_avoid::Agent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::obstacle_avoid::Agent_<ContainerAllocator> & v) 
  {
    s << indent << "labels[]" << std::endl;
    for (size_t i = 0; i < v.labels.size(); ++i)
    {
      s << indent << "  labels[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.labels[i]);
    }
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "radius: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.radius);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_AVOID_MESSAGE_AGENT_H

